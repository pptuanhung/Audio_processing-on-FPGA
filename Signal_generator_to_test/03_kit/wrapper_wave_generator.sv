
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module wrapper_wave_generator(

  //////////// CLOCK //////////
  input                   CLOCK2_50,
  input                   CLOCK3_50,
  input                   CLOCK4_50,
  input                   CLOCK_50,

  //////////// KEY //////////
  input          [3:0]    KEY,

  //////////// SW //////////
  input          [9:0]    SW,

  //////////// LED //////////
  output         [9:0]    LEDR,

  //////////// Seg7 //////////
  output         [6:0]    HEX0,
  output         [6:0]    HEX1,
  output         [6:0]    HEX2,
  output         [6:0]    HEX3,
  output         [6:0]    HEX4,
  output         [6:0]    HEX5,

  //////////// Audio //////////
  output                  AUD_BCLK,
  output                  AUD_DACDAT,
  output                  AUD_DACLRCK,
  output                  AUD_XCK,

  //////////// I2C for Audio and Video-In //////////
  output                  FPGA_I2C_SCLK,
  inout                   FPGA_I2C_SDAT
);

  wire  [15:0]  wave_digital, wave_digital_sample; 
  logic clk_12mhz, clk_i2c, sample_clk;
  reg rst_ni;
  assign rst_ni = SW[5]; 
  
  logic start_config, done_config;
  
  wave_gen    wave_gen_to_wm8731  (
                            .clk     ( CLOCK_50 ),
									 
                            .btn0        ( KEY[0]),
                            .btn1        ( KEY[1]),
                            .btn2        ( KEY[2]),
                            .btn3        ( KEY[3]),
									 
                            
                            .sw0        ( SW[0]),
                            .sw1        ( SW[1]),
                            .sw2        ( SW[2]),
                            .sw3        ( SW[3]),
                            .sw4        ( SW[4]),
									 .rst_n      ( SW[5]),
									 .wave_digital(wave_digital)
									 );

  set_en_when_edge_rise  SW_TO_CONFIG  (
                            .clk_i     ( clk_i2c ),
                            .edgerise_i( SW[7]),
                            .en_o      ( start_config ));
									 
  gen12Mhz    PLL_12MHZ  (
                .refclk  ( CLOCK_50  ),
                .rst     ( 1'b0      ),
                .outclk_0( clk_12mhz )
					 );
  
  setup_codec  CODEC_SETUP  (
                   .clk_50mhz ( CLOCK_50      ),
                   .rst_ni    ( SW[5]        ),
                   .en_i      ( SW[6]          ),
                   .start_cf_i( start_config  ),
                   .i2c_sdin_o( FPGA_I2C_SDAT ),
                   .i2c_sclk_o( FPGA_I2C_SCLK ),
                   .cf_done_o ( done_config   ),
                   .clk_i2c_o ( clk_i2c       )
						 );
   
  forever_set_en_when_edge_rise  DONE_CF  (
                            .clk_i     ( CLOCK_50         ),
                            .edgerise_i( done_config      ),
                            .en_o      ( load_dac_dat     )
									 );
  
  assign LEDR[9] = load_dac_dat;	
  
   always_ff@( posedge sample_clk, negedge rst_ni ) begin: SAMPLING_FF
		 if      ( ~rst_ni      )  wave_digital_sample <= 'b0;
		 else if ( load_dac_dat )  wave_digital_sample <= wave_digital;
  end
  
  p2s_buffer_rjm_codec    FPGA_CODEC_BUFFER   (
                               .clk_i         ( clk_12mhz ),
                               .rst_ni        ( SW[5]    ),
                               .en_i          ( SW[7]      ),
                               .paralel_data_i( wave_digital_sample  ),
                               .load_i        ( load_dac_dat  ),
                               .seria_data_o  ( AUD_DACDAT    ),
                               .codec_bclk_o  ( AUD_BCLK      ),
                               .codec_lrck_o  ( AUD_DACLRCK   ),
                               .sample_clk_o  ( sample_clk    )
										 );
  
  assign AUD_XCK = clk_12mhz;
 				
  
endmodule
